{"version":3,"sources":["app/views/masterClass/EditClassroomSlot.js","app/views/classrooms/CustomSelect.js"],"names":["basicFormSchema","yup","shape","teacher","required","subject","course","yearLevel","EditClassroomSlot","useContext","AppContext","setClassroomsSlots","classrooms","classroomsSlots","teachers","subjects","courses","id","useParams","history","useHistory","classroomSlot","find","slot","console","log","courseOptions","map","value","label","courseName","teachersOptions","teacherName","subjectsOption","subjectName","yearLevelOptions","year","handleSave","values","a","updatedSlot","api","put","handleCancel","push","routeSegments","name","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","noValidate","classList","htmlFor","options","onChange","type","onClick","option","defaultValue"],"mappings":"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","file":"static/js/40.e6b21cf7.chunk.js","sourcesContent":["import React, { useContext, Fragment } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport CustomSelect from \"../classrooms/CustomSelect\";\r\nimport { Formik } from \"formik\";\r\nimport Swal from \"sweetalert2\";\r\n// create axios function\r\nimport api from \"app/api/api\";\r\nimport { NotificationManager } from \"react-notifications\";\r\n\r\nconst basicFormSchema = yup.object().shape({\r\n  teacher: yup.string().required(\"Teacher is required\"),\r\n  subject: yup.string().required(\"Subject is required\"),\r\n  course: yup.string().required(\"Course is required\"),\r\n  yearLevel: yup.string().required(\"Year Level is required\"),\r\n});\r\n\r\nconst EditClassroomSlot = () => {\r\n  const {\r\n    classrooms,\r\n    setClassroomsSlots,\r\n    classroomsSlots,\r\n    teachers,\r\n    subjects,\r\n    courses,\r\n  } = useContext(AppContext);\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const years = [\"1st Year\", \"2nd Year\", \"3rd Year\", \"4th Year\", \"5th Year\"];\r\n  const classroomSlot = classroomsSlots.find((slot) => slot.id === id);\r\n  const teacher = teachers.find(\r\n    (teacher) => teacher.id === classroomSlot.teacher\r\n  );\r\n  const subject = subjects.find(\r\n    (subject) => subject.id === classroomSlot.subject\r\n  );\r\n  const course = courses.find((course) => course.id === classroomSlot.course);\r\n  console.log(teacher);\r\n  console.log(subject);\r\n  console.log(course);\r\n\r\n  const courseOptions =\r\n    courses &&\r\n    courses.map((course) => {\r\n      return {\r\n        value: course.id,\r\n        label: course.courseName,\r\n      };\r\n    });\r\n  const teachersOptions = teachers.map((teacher) => {\r\n    return {\r\n      value: teacher.id,\r\n      label: teacher.teacherName,\r\n    };\r\n  });\r\n  const subjectsOption = subjects.map((subject) => {\r\n    return {\r\n      value: subject.id,\r\n      label: subject.subjectName,\r\n    };\r\n  });\r\n  const yearLevelOptions = years.map((year) => {\r\n    return {\r\n      value: year,\r\n      label: year,\r\n    };\r\n  });\r\n  const handleSave = async (values) => {\r\n    const { teacher, subject, course, yearLevel } = values;\r\n    const updatedSlot = {\r\n      teacher: teacher,\r\n      subject: subject,\r\n      course: course,\r\n      yearLevel: yearLevel,\r\n    };\r\n    await api.put(`/classroomSlots/${id}`, updatedSlot);\r\n    setClassroomsSlots(\r\n      classroomsSlots.map((classroomSlot) =>\r\n        classroomSlot.id === id\r\n          ? {\r\n              ...classroomSlot,\r\n              teacher: teacher,\r\n              subject: subject,\r\n              course: course,\r\n              yearLevel: yearLevel,\r\n            }\r\n          : classroomSlot\r\n      )\r\n    );\r\n  };\r\n  const handleCancel = () => {\r\n    history.push(\"/masterClass/list\");\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Home\", path: \"/\" },\r\n          { name: \"Master Class List\", path: \"/students/studentsList\" },\r\n          { name: \"Edit Classroom Slot\" },\r\n        ]}\r\n      />\r\n      {classroomSlot && course && subject && teacher ? (\r\n        <div className=\"card\">\r\n          <Formik\r\n            initialValues={{\r\n              teacher: teacher.teacherName,\r\n              subject: subject.subjectName,\r\n              course: course.courseName,\r\n              yearLevel: classroomSlot.yearLevel,\r\n            }}\r\n            validationSchema={basicFormSchema}\r\n            onSubmit={handleSave}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSave,\r\n              isSubmitting,\r\n              setFieldValue,\r\n            }) => {\r\n              return (\r\n                <form\r\n                  className=\"needs-validation\"\r\n                  onSubmit={handleSave}\r\n                  noValidate\r\n                >\r\n                  <div className=\"card-body\">\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.teacher && touched.teacher,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"teacher\" className=\"ul-form__label\">\r\n                          Teacher:\r\n                        </label>\r\n                        <CustomSelect\r\n                          name=\"teacher\"\r\n                          options={teachersOptions}\r\n                          onChange={(value) =>\r\n                            setFieldValue(\"teacher\", value.value)\r\n                          }\r\n                          value={values.teacher}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Teacher is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.subject && touched.subject,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"subject\" className=\"ul-form__label\">\r\n                          Subject\r\n                        </label>\r\n                        <CustomSelect\r\n                          name=\"subject\"\r\n                          options={subjectsOption}\r\n                          onChange={(value) =>\r\n                            setFieldValue(\"subject\", value.value)\r\n                          }\r\n                          value={values.subject}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Subject is required\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.course && touched.course,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"course\" className=\"ul-form__label\">\r\n                          Course\r\n                        </label>\r\n                        <CustomSelect\r\n                          name=\"course\"\r\n                          options={courseOptions}\r\n                          onChange={(value) =>\r\n                            setFieldValue(\"course\", value.value)\r\n                          }\r\n                          value={values.course}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Course is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.yearLevel && touched.yearLevel,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"yearLevel\" className=\"ul-form__label\">\r\n                          Year Level\r\n                        </label>\r\n                        <CustomSelect\r\n                          name=\"yearLevel\"\r\n                          options={yearLevelOptions}\r\n                          onChange={(value) =>\r\n                            setFieldValue(\"yearLevel\", value.value)\r\n                          }\r\n                          value={values.yearLevel}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Year Level is required\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                  </div>\r\n                  <div className=\"card-footer\">\r\n                    <div className=\"mc-footer\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-lg-12 \">\r\n                          <button type=\"submit\" className=\"btn btn-primary m-1\">\r\n                            Save\r\n                          </button>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-outline-secondary m-1\"\r\n                            onClick={handleCancel}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EditClassroomSlot;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nexport default ({ onChange, options, value, className }) => {\r\n  // setting default value\r\n  const defaultValue = (options, value) => {\r\n    return options ? options.find((option) => option.value === value) : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Select\r\n        value={defaultValue(options, value)}\r\n        onChange={(value) => {\r\n          onChange(value);\r\n        }}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}