{"version":3,"sources":["app/views/manageClassrooms/functions/generateTimeSlots.js","app/views/manageClassrooms/functions/generateTime.js","app/views/manageClassrooms/EditClassroom.js","../node_modules/nanoid/index.browser.js","../node_modules/react-bootstrap/esm/Spinner.js","../node_modules/date-fns/esm/addMinutes/index.js","app/views/classrooms/CustomSelect.js","../node_modules/date-fns/esm/setHours/index.js","../node_modules/date-fns/esm/setMinutes/index.js","../node_modules/date-fns/esm/setSeconds/index.js","../node_modules/date-fns/esm/isBefore/index.js","../node_modules/date-fns/esm/getHours/index.js","../node_modules/date-fns/esm/setMilliseconds/index.js"],"names":["generateTimeSlots","startTime","endTime","setTime","x","h","m","s","ms","setHours","setMinutes","setSeconds","setMilliseconds","from","Date","to","step","addMinutes","blocks","cursor","inc","isBefore","push","start","format","end","value","isOccupied","generateTime","time","getHours","basicFormSchema","yup","shape","roomName","required","EditClassroom","useContext","AppContext","dispatch","classrooms","user","token","id","useParams","timeSlotOptions","map","slot","label","useState","loading","setLoading","classroom","find","history","useHistory","handleSubmit","values","a","timeSlots","email","modified","now","notifications","nanoid","created","isViewed","action","content","name","location","description","Swal","fire","title","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","then","result","isConfirmed","updateClassroom","console","log","handleCancel","text","icon","confirmButtonColor","cancelButtonColor","routeSegments","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","noValidate","classList","htmlFor","type","placeholder","onChange","onBlur","options","disabled","size","variant","animation","onClick","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","dirtyDate","dirtyAmount","requiredArgs","arguments","amount","toInteger","addMilliseconds","option","defaultValue","dirtyHours","date","toDate","hours","dirtyMinutes","minutes","dirtySeconds","seconds","dirtyDateToCompare","dateToCompare","getTime","dirtyMilliseconds","milliseconds"],"mappings":"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","file":"static/js/11.9a25c739.chunk.js","sourcesContent":["import {\r\n  isBefore,\r\n  setHours,\r\n  setMinutes,\r\n  setSeconds,\r\n  addMinutes,\r\n  setMilliseconds,\r\n  format,\r\n} from \"date-fns\";\r\nexport const generateTimeSlots = (startTime, endTime) => {\r\n  const setTime = (x, h = 0, m = 0, s = 0, ms = 0) =>\r\n    setHours(setMinutes(setSeconds(setMilliseconds(x, ms), s), m), h);\r\n  const from = setTime(new Date(), startTime);\r\n  const to = setTime(new Date(), endTime);\r\n  const step = (x) => addMinutes(x, 60);\r\n\r\n  let blocks = [];\r\n  let cursor = from;\r\n  let inc = 1;\r\n  while (isBefore(cursor, to)) {\r\n    blocks.push({\r\n      start: format(cursor, \"h:mm a\"),\r\n      end: format(step(cursor), \"h:mm a\"),\r\n      value: inc++,\r\n      isOccupied: false,\r\n    });\r\n\r\n    cursor = step(cursor);\r\n  }\r\n\r\n  return blocks;\r\n};\r\n","import {\r\n  isBefore,\r\n  setHours,\r\n  setMinutes,\r\n  setSeconds,\r\n  addMinutes,\r\n  setMilliseconds,\r\n  getHours,\r\n  format,\r\n} from \"date-fns\";\r\nexport const generateTime = (startTime, endTime) => {\r\n  const setTime = (x, h = 0, m = 0, s = 0, ms = 0) =>\r\n    setHours(setMinutes(setSeconds(setMilliseconds(x, ms), s), m), h);\r\n  const from = setTime(new Date(), startTime);\r\n  const to = setTime(new Date(), endTime + 1);\r\n  const step = (x) => addMinutes(x, 60);\r\n\r\n  let blocks = [];\r\n  let cursor = from;\r\n\r\n  while (isBefore(cursor, to)) {\r\n    blocks.push({ time: format(cursor, \"h:mm a\"), value: getHours(cursor) });\r\n\r\n    cursor = step(cursor);\r\n  }\r\n\r\n  return blocks;\r\n};\r\n","import React, { useContext, Fragment, useState } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { Formik } from \"formik\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport CustomSelect from \"../classrooms/CustomSelect\";\r\nimport { updateClassroom } from \"app/reducers/actions/ClassroomActions\";\r\nimport { generateTime } from \"./functions/generateTime\";\r\nimport { generateTimeSlots } from \"./functions/generateTimeSlots\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\nconst basicFormSchema = yup.object().shape({\r\n  roomName: yup.string().required(\"Room Name is required\"),\r\n  startTime: yup.string().required(\"Start Time is required\"),\r\n  endTime: yup.string().required(\"End Time is required\"),\r\n});\r\nconst EditClassroom = () => {\r\n  const { dispatch, classrooms, user, token } = useContext(AppContext);\r\n  const { id } = useParams();\r\n  const timeSlotOptions = generateTime(6, 21).map((slot) => {\r\n    return {\r\n      value: slot.value,\r\n      label: slot.time,\r\n    };\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const classroom = classrooms.find((classroom) => classroom.id === id);\r\n  const history = useHistory();\r\n  const handleSubmit = async (values) => {\r\n    const { roomName, startTime, endTime } = values;\r\n\r\n    const timeSlots = generateTimeSlots(startTime, endTime);\r\n    const classroom = {\r\n      roomName: roomName,\r\n      timeSlots: timeSlots,\r\n      user: user.email,\r\n      modified: Date.now(),\r\n    };\r\n    const notifications = {\r\n      id: nanoid(),\r\n      created: Date.now(),\r\n      user: user.email,\r\n      isViewed: false,\r\n      action: \"update\",\r\n      content: {\r\n        name: roomName,\r\n        location: \"manage\",\r\n        description: \"click to see more information\",\r\n      },\r\n    };\r\n    Swal.fire({\r\n      title: \"Do you want to save the changes?\",\r\n      showDenyButton: true,\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Save\",\r\n      denyButtonText: `Don't save`,\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        try {\r\n          setLoading(true);\r\n          await updateClassroom(id, classroom, notifications, token)(dispatch);\r\n          await Swal.fire(\"Updated!\", \"Classroom has been updated.\", \"success\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n  const handleCancel = async () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/manage/list\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[{ name: \"Home\", path: \"/\" }, { name: \"Add Classroom\" }]}\r\n      />\r\n\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <strong>\r\n              Please fill all the required (\r\n              <span className=\"text-danger\">*</span>) fields\r\n            </strong>\r\n          </div>\r\n          {classroom && (\r\n            <Formik\r\n              initialValues={classroom}\r\n              validationSchema={basicFormSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n                isSubmitting,\r\n                setFieldValue,\r\n              }) => {\r\n                return (\r\n                  <form\r\n                    className=\"needs-validation\"\r\n                    onSubmit={handleSubmit}\r\n                    noValidate\r\n                  >\r\n                    <div className=\"card-body\">\r\n                      <div className=\"form-row\">\r\n                        <div\r\n                          className={classList({\r\n                            \"col-md-6 mb-3\": true,\r\n                            \"valid-field\": !errors.roomName && touched.roomName,\r\n                            \"invalid-field\":\r\n                              errors.roomName && touched.roomName,\r\n                          })}\r\n                        >\r\n                          <label htmlFor=\"courseName\">\r\n                            Room Name (<span className=\"text-danger\">*</span>)\r\n                          </label>\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"roomName\"\r\n                            placeholder=\"Room Name\"\r\n                            name=\"roomName\"\r\n                            value={values.roomName}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            required\r\n                          />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errors.roomName}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"custom-separator\"></div>\r\n                      <div className=\"form-row\">\r\n                        <div\r\n                          className={classList({\r\n                            \"col-md-6 mb-3\": true,\r\n                            \"valid-field\":\r\n                              !errors.startTime && touched.startTime,\r\n                            \"invalid-field\":\r\n                              errors.startTime && touched.startTime,\r\n                          })}\r\n                        >\r\n                          <label htmlFor=\"startTime\">\r\n                            Start Time (<span className=\"text-danger\">*</span>)\r\n                          </label>\r\n                          <CustomSelect\r\n                            name=\"startTime\"\r\n                            options={timeSlotOptions}\r\n                            onChange={(value) =>\r\n                              setFieldValue(\"startTime\", value.value)\r\n                            }\r\n                            value={values.startTime}\r\n                            required\r\n                          />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errors.startTime}\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          className={classList({\r\n                            \"col-md-6 mb-3\": true,\r\n                            \"valid-field\": !errors.endTime && touched.endTime,\r\n                            \"invalid-field\": errors.endTime && touched.endTime,\r\n                          })}\r\n                        >\r\n                          <label htmlFor=\"endTime\">\r\n                            End Time (<span className=\"text-danger\">*</span>)\r\n                          </label>\r\n                          <CustomSelect\r\n                            name=\"endTime\"\r\n                            options={timeSlotOptions}\r\n                            onChange={(value) =>\r\n                              setFieldValue(\"endTime\", value.value)\r\n                            }\r\n                            value={values.endTime}\r\n                            required\r\n                          />\r\n                          <div className=\"invalid-feedback\">\r\n                            {errors.endTime}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                      <div className=\"mc-footer\">\r\n                        <Button\r\n                          disabled={loading}\r\n                          className=\"btn btn-primary mr-2\"\r\n                          type=\"submit\"\r\n                        >\r\n                          Submit\r\n                          {loading && (\r\n                            <Spinner\r\n                              size=\"sm\"\r\n                              variant=\"light\"\r\n                              className=\"mr-1\"\r\n                              animation=\"border\"\r\n                            />\r\n                          )}\r\n                        </Button>\r\n                        <Button onClick={handleCancel} variant=\"danger\">\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EditClassroom;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * var result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nexport default ({ onChange, options, value, className }) => {\r\n  // setting default value\r\n  const defaultValue = (options, value) => {\r\n    return options ? options.find((option) => option.value === value) : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Select\r\n        value={defaultValue(options, value)}\r\n        onChange={(value) => {\r\n          onChange(value);\r\n        }}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * var result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMilliseconds\n * @category Millisecond Helpers\n * @summary Set the milliseconds to the given date.\n *\n * @description\n * Set the milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} milliseconds - the milliseconds of the new date\n * @returns {Date} the new date with the milliseconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 300 milliseconds to 1 September 2014 11:30:40.500:\n * var result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)\n * //=> Mon Sep 01 2014 11:30:40.300\n */\n\nexport default function setMilliseconds(dirtyDate, dirtyMilliseconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = toInteger(dirtyMilliseconds);\n  date.setMilliseconds(milliseconds);\n  return date;\n}"],"sourceRoot":""}