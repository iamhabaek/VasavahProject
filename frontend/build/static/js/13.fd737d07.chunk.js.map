{"version":3,"sources":["app/views/students/AddStudentForm.js","../node_modules/nanoid/index.browser.js","../node_modules/react-bootstrap/esm/Spinner.js","app/views/students/CustomSelect.js","app/views/students/options.js"],"names":["basicFormSchema","yup","shape","firstName","required","lastName","birthDate","address","phone","course","email","yearLevel","gender","status","AddStudentForm","useContext","AppContext","courses","dispatch","user","token","useState","loading","setLoading","history","useHistory","options","map","value","courseName","label","genderOptions","statusOptions","handleSubmit","values","a","console","log","name","student","id","nanoid","created","Date","now","notifications","isViewed","action","content","location","description","addStudent","handleCancel","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","push","routeSegments","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","noValidate","classList","htmlFor","type","placeholder","onChange","onBlur","yearLvlOptions","opt","idx","key","checked","disabled","variant","as","size","role","aria-hidden","animation","onClick","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","find","option","defaultValue"],"mappings":"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","file":"static/js/13.fd737d07.chunk.js","sourcesContent":["import React, { useContext, Fragment, useState } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Field, Formik } from \"formik\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport CustomSelect from \"./CustomSelect\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { yearLvlOptions } from \"./options\";\r\nimport { addStudent } from \"app/reducers/actions/ClassroomActions\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n// formik validation schema using yup\r\nconst basicFormSchema = yup.object().shape({\r\n  firstName: yup.string().required(\"First Name is required\"),\r\n  lastName: yup.string().required(\"Last Name is required\"),\r\n  birthDate: yup.string().required(\"Birth Date is required\"),\r\n  address: yup.string().required(\"Address is required\"),\r\n  phone: yup.string().required(\"Phone number is required\"),\r\n  course: yup.string().required(\"Course is required\"),\r\n  email: yup.string().email().required(\"email is required\"),\r\n  yearLevel: yup.string().required(\"Year Level is required\"),\r\n  gender: yup.string().required(\"Gender is required\"),\r\n  status: yup.string().required(\"Status is required\"),\r\n});\r\nconst AddStudentForm = () => {\r\n  // Declare states from context provider\r\n  const { courses, dispatch, user, token } = useContext(AppContext);\r\n  const [loading, setLoading] = useState();\r\n  const history = useHistory();\r\n  // Generate course options\r\n  const options = courses.map((course) => {\r\n    return {\r\n      value: course.courseName,\r\n      label: course.courseName,\r\n    };\r\n  });\r\n  const genderOptions = [\r\n    { value: \"Male\", label: \"Male\" },\r\n    { value: \"Female\", label: \"Female\" },\r\n  ];\r\n  const statusOptions = [\r\n    { value: \"Regular\", label: \"Regular\" },\r\n    { value: \"Irregular\", label: \"Irregular\" },\r\n  ];\r\n  const initialState = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    birthDate: \"\",\r\n    gender: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    course: \"\",\r\n    email: \"\",\r\n    yearLevel: \"\",\r\n    status: \"\",\r\n  };\r\n\r\n  // Submit data to database\r\n  const handleSubmit = async (values) => {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      birthDate,\r\n      status,\r\n      address,\r\n      phone,\r\n      course,\r\n      gender,\r\n      yearLevel,\r\n    } = values;\r\n    console.log();\r\n    const name = `${firstName} ${lastName}`;\r\n    // declare student object\r\n    const student = {\r\n      id: nanoid(),\r\n      name: name,\r\n      birthDate: birthDate,\r\n      gender: gender,\r\n      address: address,\r\n      phone: phone,\r\n      course: course,\r\n      status: status,\r\n      yearLevel: yearLevel,\r\n      email: email,\r\n      created: Date.now(),\r\n    };\r\n    const notifications = {\r\n      id: nanoid(),\r\n      created: Date.now(),\r\n      user: user.email,\r\n      isViewed: false,\r\n      action: \"add\",\r\n      content: {\r\n        name: name,\r\n        location: \"student\",\r\n        description: \"click to see more information\",\r\n      },\r\n    };\r\n    setLoading(true);\r\n    await addStudent(student, notifications, token)(dispatch);\r\n    setLoading(false);\r\n  };\r\n  const handleCancel = async () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/students/studentslist\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Home\", path: \"/\" },\r\n          { name: \"Students List\", path: \"/students/studentslist\" },\r\n          { name: \"Add Student\" },\r\n        ]}\r\n      />\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <strong>\r\n            Please fill all the required (<span className=\"text-danger\">*</span>\r\n            ) fields\r\n          </strong>\r\n        </div>\r\n        <Formik\r\n          initialValues={initialState}\r\n          validationSchema={basicFormSchema}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isSubmitting,\r\n            setFieldValue,\r\n          }) => {\r\n            return (\r\n              <form\r\n                className=\"needs-validation\"\r\n                onSubmit={handleSubmit}\r\n                noValidate\r\n              >\r\n                <div className=\"card-body\">\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.firstName && touched.firstName,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"firstName\" className=\"ul-form__label\">\r\n                        First Name (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"firstName\"\r\n                        placeholder=\"First Name\"\r\n                        name=\"firstName\"\r\n                        value={values.firstName}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.firstName}</div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.lastName && touched.lastName,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"firstName\" className=\"ul-form__label\">\r\n                        Last Name (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"lastName\"\r\n                        placeholder=\"Last Name\"\r\n                        name=\"lastName\"\r\n                        value={values.lastName}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.lastName}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"custom-separator\"></div>\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.birthDate && touched.birthDate,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"age\" className=\"ul-form__label\">\r\n                        Birth Date (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"date\"\r\n                        name=\"birthDate\"\r\n                        onChange={handleChange}\r\n                        value={values.birthDate}\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.birthDate}</div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.address && touched.address,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"address\" className=\"ul-form__label\">\r\n                        Address (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"address\"\r\n                        placeholder=\"Address\"\r\n                        name=\"address\"\r\n                        value={values.address}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.address}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"custom-separator\"></div>\r\n\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.email && touched.email,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                        Email Address (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email Address\"\r\n                        name=\"email\"\r\n                        value={values.email}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.email}</div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.phone && touched.phone,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                        Phone number (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"phone\"\r\n                        placeholder=\"Phone number\"\r\n                        name=\"phone\"\r\n                        value={values.phone}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.phone}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"custom-separator\"></div>\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.course && touched.course,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"course\" className=\"ul-form__label\">\r\n                        Course (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <CustomSelect\r\n                        name=\"course\"\r\n                        options={options}\r\n                        onChange={(value) =>\r\n                          setFieldValue(\"course\", value.value)\r\n                        }\r\n                        value={values.course}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.course}</div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.yearLevel && touched.yearLevel,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"yearLevel\" className=\"ul-form__label\">\r\n                        Year Level (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <CustomSelect\r\n                        name=\"yearLevel\"\r\n                        options={yearLvlOptions}\r\n                        onChange={(value) =>\r\n                          setFieldValue(\"yearLevel\", value.value)\r\n                        }\r\n                        value={values.yearLevel}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.yearLevel}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.gender && touched.gender,\r\n                      })}\r\n                    >\r\n                      <label className=\"ul-form__label\">\r\n                        Gender (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      {genderOptions.map((opt, idx) => (\r\n                        <div key={idx}>\r\n                          <Field\r\n                            className=\"mr-2\"\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                            value={opt.value}\r\n                            // onChange={handleChange}\r\n                            checked={values.gender === opt.value}\r\n                          />\r\n                          <label htmlFor=\"gender\" className=\"ul-form__label\">\r\n                            {opt.label}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n                      <div className=\"invalid-feedback\">{errors.gender}</div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.status && touched.status,\r\n                      })}\r\n                    >\r\n                      <label className=\"ul-form__label\">\r\n                        Status (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      {statusOptions.map((opt, idx) => (\r\n                        <div key={idx}>\r\n                          <Field\r\n                            className=\"mr-2\"\r\n                            type=\"radio\"\r\n                            name=\"status\"\r\n                            value={opt.value}\r\n                            // onChange={handleChange}\r\n                            checked={values.status === opt.value}\r\n                          />\r\n                          <label htmlFor={opt.value} className=\"ul-form__label\">\r\n                            {opt.label}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n                      <div className=\"invalid-feedback\">{errors.status}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                  <div className=\"mc-footer\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-12 \">\r\n                        <Button\r\n                          disabled={loading}\r\n                          className=\"mr-2\"\r\n                          variant=\"primary\"\r\n                          type=\"submit\"\r\n                        >\r\n                          {loading && (\r\n                            <Spinner\r\n                              as=\"span\"\r\n                              variant=\"light\"\r\n                              size=\"sm\"\r\n                              role=\"status\"\r\n                              aria-hidden=\"true\"\r\n                              animation=\"border\"\r\n                              className=\"mr-1\"\r\n                            />\r\n                          )}\r\n                          Submit\r\n                        </Button>\r\n\r\n                        <Button onClick={handleCancel} variant=\"danger\">\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddStudentForm;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nexport default ({ onChange, options, value, className }) => {\r\n  const defaultValue = (options, value) => {\r\n    return options ? options.find((option) => option.value === value) : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Select\r\n        value={defaultValue(options, value)}\r\n        onChange={(value) => {\r\n          onChange(value);\r\n        }}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export const yearLvlOptions = [\r\n  {\r\n    value: \"1st Year\",\r\n    label: \"1st Year\",\r\n  },\r\n  {\r\n    value: \"2nd Year\",\r\n    label: \"2nd Year\",\r\n  },\r\n  {\r\n    value: \"3rd Year\",\r\n    label: \"3rd Year\",\r\n  },\r\n  {\r\n    value: \"4th Year\",\r\n    label: \"4th Year\",\r\n  },\r\n  {\r\n    value: \"5th Year\",\r\n    label: \"5th Year\",\r\n  },\r\n];\r\nexport const genderOptions = [\r\n  {\r\n    value: \"Male\",\r\n    label: \"Male\",\r\n  },\r\n  {\r\n    value: \"Female\",\r\n    label: \"Female\",\r\n  },\r\n];\r\n"],"sourceRoot":""}