{"version":3,"sources":["app/views/courses/EditCourse.js","../node_modules/nanoid/index.browser.js","../node_modules/react-bootstrap/esm/Spinner.js"],"names":["basicFormSchema","yup","shape","courseName","required","yearsToFinish","EditCourse","history","useHistory","useContext","AppContext","courses","user","dispatch","token","id","useParams","useState","loading","setLoading","course","find","handleSubmit","values","a","updatedCourse","Number","notifications","nanoid","created","Date","now","email","isViewed","action","content","name","location","description","Swal","fire","title","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","then","result","isConfirmed","updateCourse","console","log","handleCancel","text","icon","confirmButtonColor","cancelButtonColor","push","routeSegments","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","noValidate","classList","htmlFor","type","placeholder","value","onChange","onBlur","disabled","variant","as","size","role","aria-hidden","animation","onClick","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName"],"mappings":"oRAcMA,EAAkBC,WAAaC,MAAM,CACzCC,WAAYF,WAAaG,SAAS,2BAClCC,cAAeJ,WAAaG,SAAS,iCAyMxBE,UAtMI,WACjB,IAAMC,EAAUC,cADO,EAGoBC,qBAAWC,KAA9CC,EAHe,EAGfA,QAASC,EAHM,EAGNA,KAAMC,EAHA,EAGAA,SAAUC,EAHV,EAGUA,MAEzBC,EAAOC,cAAPD,GALe,EAMOE,oBAAS,GANhB,mBAMhBC,EANgB,KAMPC,EANO,KASjBC,EAAST,EAAQU,MAAK,SAACD,GAAD,OAAYA,EAAOL,KAAOA,KAEhDO,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sDAEXrB,EAA8BoB,EAA9BpB,WAAYE,EAAkBkB,EAAlBlB,cAEdoB,EAAgB,CACpBV,GAAIA,EACJZ,WAAYA,EACZE,cAAeqB,OAAOrB,IAElBsB,EAAgB,CACpBZ,GAAIa,cACJC,QAASC,KAAKC,MACdnB,KAAMA,EAAKoB,MACXC,UAAU,EACVC,OAAQ,SACRC,QAAS,CACPC,KAAMjC,EACNkC,SAAU,SACVC,YAAa,4BAGjBC,IAAKC,KAAK,CACRC,MAAO,mCACPC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAmB,OACnBC,eAAe,eACdC,KANH,uCAMQ,WAAOC,GAAP,SAAAvB,EAAA,0DACFuB,EAAOC,YADL,iCAGF7B,GAAW,GAHT,SAII8B,aAAalC,EAAIU,EAAeE,EAAeb,EAA/CmC,CAAsDpC,GAJ1D,uBAKI0B,IAAKC,KAAK,WAAY,2BAA4B,WALtD,uDAOFU,QAAQC,IAAR,MAPE,yDANR,uDAkBAhC,GAAW,GAvCQ,2CAAH,sDA0CZiC,EAAY,uCAAG,sBAAA5B,EAAA,sDACnBe,IAAKC,KAAK,CACRC,MAAO,oBACPY,KAAM,sGACNC,KAAM,UACNX,kBAAkB,EAClBY,mBAAoB,UACpBC,kBAAmB,OACnBZ,kBAAmB,QAClBE,MAAK,SAACC,GACHA,EAAOC,aACTzC,EAAQkD,KAAK,4BAXE,2CAAH,qDAelB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CACEC,cAAe,CAAC,CAAEtB,KAAM,OAAQuB,KAAM,KAAO,CAAEvB,KAAM,kBAEtDhB,GACC,yBAAKwC,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,eACb,iEAEE,0BAAMA,UAAU,eAAhB,KAFF,aAKF,kBAAC,IAAD,CACEC,cAAezC,EACf0C,iBAAkB9D,EAClB+D,SAAUzC,IAET,YAQM,IAPLC,EAOI,EAPJA,OACAyC,EAMI,EANJA,OACAC,EAKI,EALJA,QACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,WACA7C,EAEI,EAFJA,aAEI,EADJ8C,aAEA,OACE,0BACER,UAAU,mBACVG,SAAUzC,EACV+C,YAAU,GAEV,yBAAKT,UAAU,aACb,yBAAKA,UAAU,YACb,yBACEA,UAAWU,YAAU,CACnB,iBAAiB,EACjB,eACGN,EAAO7D,YAAc8D,EAAQ9D,WAChC,gBACE6D,EAAO7D,YAAc8D,EAAQ9D,cAGjC,2BAAOoE,QAAQ,cAAf,gBACe,0BAAMX,UAAU,eAAhB,KADf,KAGA,2BACEY,KAAK,OACLZ,UAAU,eACV7C,GAAG,aACH0D,YAAY,cACZrC,KAAK,aACLsC,MAAOnD,EAAOpB,WACdwE,SAAUT,EACVU,OAAQT,EACR/D,UAAQ,IAEV,yBAAKwD,UAAU,oBAAf,4BAIF,yBACEA,UAAWU,YAAU,CACnB,iBAAiB,EACjB,eACGN,EAAO3D,eAAiB4D,EAAQ5D,cACnC,gBACE2D,EAAO3D,eAAiB4D,EAAQ5D,iBAGpC,2BAAOkE,QAAQ,uBAAf,oBAEE,0BAAMX,UAAU,eAAhB,KAFF,KAIA,4BACEA,UAAU,eACVc,MAAOnD,EAAOlB,cACdsE,SAAUT,EACV9B,KAAK,gBACLrB,GAAG,iBAEH,4BAAQ2D,MAAM,IAAd,eACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,YAEF,yBAAKd,UAAU,oBAAf,kCAMN,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CACEiB,SAAU3D,EACV4D,QAAQ,UACRN,KAAK,SACLZ,UAAU,QAET1C,GACC,kBAAC,IAAD,CACE6D,GAAG,OACHD,QAAQ,QACRE,KAAK,KACLC,KAAK,SACLC,cAAY,OACZC,UAAU,SACVvB,UAAU,SAdhB,gBAmBA,kBAAC,IAAD,CAAQwB,QAAShC,EAAc0B,QAAQ,UAAvC,qB,iCCzMxB,kCACO,IAkBIlD,EAAS,eAACoD,EAAD,uDAAQ,GAAR,OAClBK,OAAOC,gBAAgB,IAAIC,WAAWP,IAAOQ,QAAO,SAACzE,EAAI0E,GAWvD,OARE1E,IAFF0E,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,MAGP,M,iCChCL,2DAKIG,EAAUC,IAAMC,YAAW,SAAUC,EAAMC,GAC7C,IAAIC,EAAWF,EAAKE,SAChBnB,EAAUiB,EAAKjB,QACfK,EAAYY,EAAKZ,UACjBH,EAAOe,EAAKf,KACZkB,EAAWH,EAAKG,SAChBC,EAAUJ,EAAKhB,GACfqB,OAAwB,IAAZD,EAAqB,MAAQA,EACzCvC,EAAYmC,EAAKnC,UACjByC,EAAQC,YAA8BP,EAAM,CAAC,WAAY,UAAW,YAAa,OAAQ,WAAY,KAAM,cAG3GQ,GADJN,EAAWO,YAAmBP,EAAU,YACP,IAAMd,EACvC,OAAoBU,IAAMY,cAAcL,EAAWM,YAAS,CAC1DV,IAAKA,GACJK,EAAO,CACRzC,UAAW+C,IAAW/C,EAAW2C,EAAiBvB,GAAQuB,EAAkB,IAAMvB,EAAMF,GAAW,QAAUA,KAC3GoB,MAENN,EAAQgB,YAAc,UACPhB","file":"static/js/32.58bfbf60.chunk.js","sourcesContent":["import React, { useContext, useState, Fragment } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport AppContext from \"app/appContext\";\r\nimport { Formik } from \"formik\";\r\nimport { classList } from \"@utils\";\r\nimport Swal from \"sweetalert2\";\r\nimport * as yup from \"yup\";\r\nimport { updateCourse } from \"app/reducers/actions/ClassroomActions\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\n// validation schema\r\n\r\nconst basicFormSchema = yup.object().shape({\r\n  courseName: yup.string().required(\"Course Name is required\"),\r\n  yearsToFinish: yup.string().required(\"Years to Finish is required\"),\r\n});\r\n\r\nconst EditCourse = () => {\r\n  const history = useHistory();\r\n  //states from context provider\r\n  const { courses, user, dispatch, token } = useContext(AppContext);\r\n  // destructure params hook and take id\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // find course\r\n  const course = courses.find((course) => course.id === id);\r\n  // submit update to database\r\n  const handleSubmit = async (values) => {\r\n    //destructure values\r\n    const { courseName, yearsToFinish } = values;\r\n    // course object\r\n    const updatedCourse = {\r\n      id: id,\r\n      courseName: courseName,\r\n      yearsToFinish: Number(yearsToFinish),\r\n    };\r\n    const notifications = {\r\n      id: nanoid(),\r\n      created: Date.now(),\r\n      user: user.email,\r\n      isViewed: false,\r\n      action: \"update\",\r\n      content: {\r\n        name: courseName,\r\n        location: \"course\",\r\n        description: \"to see more information\",\r\n      },\r\n    };\r\n    Swal.fire({\r\n      title: \"Do you want to save the changes?\",\r\n      showDenyButton: true,\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Save\",\r\n      denyButtonText: `Don't save`,\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        try {\r\n          setLoading(true);\r\n          await updateCourse(id, updatedCourse, notifications, token)(dispatch);\r\n          await Swal.fire(\"Updated!\", \"Course has been updated.\", \"success\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n  // cancel edit redirect to courses list\r\n  const handleCancel = async () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/courses/courses-list\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[{ name: \"Home\", path: \"/\" }, { name: \"Edit Course\" }]}\r\n      />\r\n      {course && (\r\n        <div className=\"col-md-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              <strong>\r\n                Please fill all the required (\r\n                <span className=\"text-danger\">*</span>) fields\r\n              </strong>\r\n            </div>\r\n            <Formik\r\n              initialValues={course}\r\n              validationSchema={basicFormSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n                isSubmitting,\r\n              }) => {\r\n                return (\r\n                  <form\r\n                    className=\"needs-validation\"\r\n                    onSubmit={handleSubmit}\r\n                    noValidate\r\n                  >\r\n                    <div className=\"card-body\">\r\n                      <div className=\"form-row\">\r\n                        <div\r\n                          className={classList({\r\n                            \"col-md-4 mb-3\": true,\r\n                            \"valid-field\":\r\n                              !errors.courseName && touched.courseName,\r\n                            \"invalid-field\":\r\n                              errors.courseName && touched.courseName,\r\n                          })}\r\n                        >\r\n                          <label htmlFor=\"courseName\">\r\n                            Course Name (<span className=\"text-danger\">*</span>)\r\n                          </label>\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"courseName\"\r\n                            placeholder=\"Course Name\"\r\n                            name=\"courseName\"\r\n                            value={values.courseName}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            required\r\n                          />\r\n                          <div className=\"invalid-feedback\">\r\n                            Course name is required\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          className={classList({\r\n                            \"col-md-4 mb-3\": true,\r\n                            \"valid-field\":\r\n                              !errors.yearsToFinish && touched.yearsToFinish,\r\n                            \"invalid-field\":\r\n                              errors.yearsToFinish && touched.yearsToFinish,\r\n                          })}\r\n                        >\r\n                          <label htmlFor=\"validationCustom202\">\r\n                            Years To Finish (\r\n                            <span className=\"text-danger\">*</span>)\r\n                          </label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            value={values.yearsToFinish}\r\n                            onChange={handleChange}\r\n                            name=\"yearsToFinish\"\r\n                            id=\"yearsToFinish\"\r\n                          >\r\n                            <option value=\"\">Select Here</option>\r\n                            <option value=\"4\">4 Years</option>\r\n                            <option value=\"5\">5 Years</option>\r\n                          </select>\r\n                          <div className=\"invalid-feedback\">\r\n                            Years to Finish is required\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                      <div className=\"mc-footer\">\r\n                        <Button\r\n                          disabled={loading}\r\n                          variant=\"success\"\r\n                          type=\"submit\"\r\n                          className=\"mr-2\"\r\n                        >\r\n                          {loading && (\r\n                            <Spinner\r\n                              as=\"span\"\r\n                              variant=\"light\"\r\n                              size=\"sm\"\r\n                              role=\"status\"\r\n                              aria-hidden=\"true\"\r\n                              animation=\"border\"\r\n                              className=\"mr-1\"\r\n                            />\r\n                          )}\r\n                          Save Changes\r\n                        </Button>\r\n                        <Button onClick={handleCancel} variant=\"danger\">\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EditCourse;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;"],"sourceRoot":""}