{"version":3,"sources":["app/views/subjects/AddSubject.js","../node_modules/nanoid/index.browser.js","../node_modules/react-bootstrap/esm/Spinner.js"],"names":["basicFormSchema","yup","shape","subjectName","required","units","AddSubject","useContext","AppContext","dispatch","user","token","useState","loading","setLoading","history","useHistory","handleSubmit","values","a","subject","id","nanoid","created","Date","now","notifications","email","isViewed","action","content","name","location","description","addSubject","handleCancel","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","push","routeSegments","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","noValidate","classList","htmlFor","type","placeholder","value","onChange","onBlur","disabled","size","variant","animation","onClick","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName"],"mappings":"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","file":"static/js/36.42126b60.chunk.js","sourcesContent":["import React, { useState, useContext, createContext, Fragment } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Formik } from \"formik\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport { Spinner, Button } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\n// Create axios\r\nimport { addSubject } from \"app/reducers/actions/ClassroomActions\";\r\n// validations schema\r\nconst basicFormSchema = yup.object().shape({\r\n  subjectName: yup.string().required(\"Subject Name is required\"),\r\n  units: yup.string().required(\"Units is required\"),\r\n});\r\n\r\nconst AddSubject = () => {\r\n  // Declare states from context provider\r\n  const { dispatch, user, token } = useContext(AppContext);\r\n  const [loading, setLoading] = useState();\r\n  const history = useHistory();\r\n  // Submit data\r\n  const handleSubmit = async (values) => {\r\n    const { subjectName, units } = values;\r\n    const subject = {\r\n      id: nanoid(),\r\n      subjectName: subjectName,\r\n      units: units,\r\n      created: Date.now(),\r\n    };\r\n    const notifications = {\r\n      id: nanoid(),\r\n      created: Date.now(),\r\n      user: user.email,\r\n      isViewed: false,\r\n      action: \"add\",\r\n      content: {\r\n        name: subjectName,\r\n        location: \"subject\",\r\n        description: \"click to see more information\",\r\n      },\r\n    };\r\n    setLoading(true);\r\n    await addSubject(subject, notifications, token)(dispatch);\r\n    setLoading(false);\r\n  };\r\n  const handleCancel = async () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/subjects/subjects-list\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[{ name: \"Home\", path: \"/\" }, { name: \"Add Subject\" }]}\r\n      />\r\n\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <strong>\r\n              Please fill all the required (\r\n              <span className=\"text-danger\">*</span>) fields\r\n            </strong>\r\n          </div>\r\n\r\n          <Formik\r\n            initialValues={{\r\n              subjectName: \"\",\r\n              units: \"\",\r\n            }}\r\n            validationSchema={basicFormSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n            }) => {\r\n              return (\r\n                <form\r\n                  className=\"needs-validation\"\r\n                  onSubmit={handleSubmit}\r\n                  noValidate\r\n                >\r\n                  {\" \"}\r\n                  <div className=\"card-body\">\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"col-md-6 mb-3\": true,\r\n                          \"valid-field\":\r\n                            !errors.subjectName && touched.subjectName,\r\n                          \"invalid-field\":\r\n                            errors.subjectName && touched.subjectName,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"courseName\">\r\n                          Subject Name (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"subjectName\"\r\n                          placeholder=\"Subject Name\"\r\n                          name=\"subjectName\"\r\n                          value={values.subjectName}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Subject name is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"col-md-6 mb-3\": true,\r\n                          \"valid-field\": !errors.units && touched.units,\r\n                          \"invalid-field\": errors.units && touched.units,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"validationCustom202\">\r\n                          Units (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"units\"\r\n                          placeholder=\"Units\"\r\n                          name=\"units\"\r\n                          value={values.units}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Units is required\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"card-footer\">\r\n                    <div className=\"mc-footer\">\r\n                      <Button\r\n                        disabled={loading}\r\n                        className=\"btn btn-primary m-2\"\r\n                        type=\"submit\"\r\n                      >\r\n                        Submit\r\n                        {loading && (\r\n                          <Spinner\r\n                            size=\"sm\"\r\n                            variant=\"light\"\r\n                            className=\"mr-1\"\r\n                            animation=\"border\"\r\n                          />\r\n                        )}\r\n                      </Button>\r\n                      <Button onClick={handleCancel} variant=\"danger\">\r\n                        Cancel\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddSubject;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;"],"sourceRoot":""}