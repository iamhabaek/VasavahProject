{"version":3,"sources":["app/views/teachers/AddTeacher.js","../node_modules/react-bootstrap/esm/Spinner.js","app/views/teachers/CustomMultiSelect.js"],"names":["basicFormSchema","yup","shape","firstName","required","lastName","birthDate","email","address","phone","subjects","gender","AddTeacher","useContext","AppContext","dispatch","user","token","useState","loading","setLoading","history","useHistory","options","map","subject","value","id","label","subjectName","genderOptions","handleSubmit","values","a","subjectList","push","teacherName","teacher","created","Date","now","addTeacher","handleCancel","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","routeSegments","name","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","noValidate","classList","htmlFor","type","placeholder","onChange","onBlur","opt","idx","key","checked","component","CustomMultiSelect","disabled","variant","as","size","role","aria-hidden","animation","onClick","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","SelectField","useField","field","state","setValue","setTouched","console","log","isMulti"],"mappings":"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","file":"static/js/38.c9206b88.chunk.js","sourcesContent":["import React, { useContext, Fragment, useState } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Field, Formik } from \"formik\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { classList } from \"@utils\";\r\nimport CustomMultiSelect from \"./CustomMultiSelect\";\r\nimport { addTeacher } from \"app/reducers/actions/ClassroomActions\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\nconst basicFormSchema = yup.object().shape({\r\n  firstName: yup.string().required(\"First Name is required\"),\r\n  lastName: yup.string().required(\"Last Name is required\"),\r\n  birthDate: yup.string().required(\"Birth Date is required\"),\r\n  email: yup.string().email().required(\"Email is required\"),\r\n  address: yup.string().required(\"Address is required\"),\r\n  phone: yup.string().required(\"Phone number is required\"),\r\n  subjects: yup.array().required(\"Subjects is required\"),\r\n  gender: yup.string().required(\"Gender is required\"),\r\n});\r\n\r\nconst AddTeacher = () => {\r\n  const { subjects, user, dispatch, token } = useContext(AppContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n  // Form Initial State\r\n  const initialState = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    gender: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    subjects: \"\",\r\n    email: \"\",\r\n    birthDate: \"\",\r\n  };\r\n  // generate subjects options for select input\r\n  const options = subjects.map((subject) => {\r\n    return {\r\n      value: subject.id,\r\n      label: subject.subjectName,\r\n    };\r\n  });\r\n  const genderOptions = [\r\n    { value: \"Male\", label: \"Male\" },\r\n    { value: \"Female\", label: \"Female\" },\r\n  ];\r\n  const handleSubmit = async (values) => {\r\n    // destructure values\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      birthDate,\r\n      address,\r\n      phone,\r\n      subjects,\r\n      gender,\r\n      email,\r\n    } = values;\r\n    // get value from subjects object\r\n    const subjectList = [];\r\n    subjects.map((subject) => {\r\n      subjectList.push(subject);\r\n    });\r\n    const teacherName = `${firstName} ${lastName}`;\r\n    // teacher object\r\n    const teacher = {\r\n      teacherName: teacherName,\r\n      address: address,\r\n      email: email,\r\n      phone: phone,\r\n      subjects: subjectList,\r\n      gender: gender,\r\n      birthDate: birthDate,\r\n      created: Date.now(),\r\n    };\r\n    setLoading(true);\r\n    await addTeacher(teacher, token)(dispatch);\r\n    setLoading(false);\r\n  };\r\n  const handleCancel = async () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/teachers/teachersList\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Home\", path: \"/\" },\r\n          { name: \"Teachers List\", path: \"/teachers/teachersList\" },\r\n          { name: \"Add Teacher\" },\r\n        ]}\r\n      />\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <strong>\r\n            Please fill all the required (<span className=\"text-danger\">*</span>\r\n            ) fields\r\n          </strong>\r\n        </div>\r\n        <Formik\r\n          initialValues={initialState}\r\n          validationSchema={basicFormSchema}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n          }) => {\r\n            return (\r\n              <form\r\n                className=\"needs-validation\"\r\n                onSubmit={handleSubmit}\r\n                noValidate\r\n              >\r\n                <div className=\"card-body\">\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.firstName && touched.firstName,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"firstName\" className=\"ul-form__label\">\r\n                        First Name (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"firstName\"\r\n                        placeholder=\"First Name\"\r\n                        name=\"firstName\"\r\n                        value={values.firstName}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">\r\n                        First name is required\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.lastName && touched.lastName,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"firstName\" className=\"ul-form__label\">\r\n                        Last Name (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"lastName\"\r\n                        placeholder=\"Last Name\"\r\n                        name=\"lastName\"\r\n                        value={values.lastName}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">\r\n                        Last name is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"custom-separator\"></div>\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.birthDate && touched.birthDate,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"birthDate\" className=\"ul-form__label\">\r\n                        Birth Date (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"date\"\r\n                        name=\"birthDate\"\r\n                        onChange={handleChange}\r\n                        value={values.birthDate}\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.birthDate}</div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.address && touched.address,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"address\" className=\"ul-form__label\">\r\n                        Address (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"address\"\r\n                        placeholder=\"Address\"\r\n                        name=\"address\"\r\n                        value={values.address}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">\r\n                        Address is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"custom-separator\"></div>\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.phone && touched.phone,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                        Phone number (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"phone\"\r\n                        placeholder=\"Phone number\"\r\n                        name=\"phone\"\r\n                        value={values.phone}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">\r\n                        Phone number is required\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.email && touched.email,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                        Email Address (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <input\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email Address\"\r\n                        name=\"email\"\r\n                        value={values.email}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">{errors.email}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"custom-separator\"></div>\r\n                  <div className=\"form-row\">\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.gender && touched.gender,\r\n                      })}\r\n                    >\r\n                      {\" \"}\r\n                      <label className=\"ul-form__label\">\r\n                        Gender (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      {genderOptions.map((opt, idx) => (\r\n                        <div key={idx}>\r\n                          <Field\r\n                            className=\"mr-1\"\r\n                            type=\"radio\"\r\n                            name=\"gender\"\r\n                            value={opt.value}\r\n                            // onChange={handleChange}\r\n                            checked={values.gender === opt.value}\r\n                          />\r\n                          <label className=\"ul-form__label\" htmlFor=\"gender\">\r\n                            {opt.label}\r\n                          </label>\r\n                        </div>\r\n                      ))}\r\n                      <div className=\"invalid-feedback\">Gender is required</div>\r\n                    </div>\r\n                    <div\r\n                      className={classList({\r\n                        \"form-group col-md-6\": true,\r\n                        \"invalid-field\": errors.subjects && touched.subjects,\r\n                      })}\r\n                    >\r\n                      <label htmlFor=\"subjects\" className=\"ul-form__label\">\r\n                        Subjects (<span className=\"text-danger\">*</span>)\r\n                      </label>\r\n                      <Field\r\n                        name=\"subjects\"\r\n                        component={CustomMultiSelect}\r\n                        options={options}\r\n                        value={values.subjects}\r\n                        required\r\n                      />\r\n                      <div className=\"invalid-feedback\">\r\n                        Subjects is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                  <div className=\"mc-footer\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-12 \">\r\n                        <Button\r\n                          disabled={loading}\r\n                          className=\"mr-2\"\r\n                          variant=\"info\"\r\n                          type=\"submit\"\r\n                        >\r\n                          {loading && (\r\n                            <Spinner\r\n                              as=\"span\"\r\n                              variant=\"light\"\r\n                              size=\"sm\"\r\n                              role=\"status\"\r\n                              aria-hidden=\"true\"\r\n                              animation=\"border\"\r\n                              className=\"mr-1\"\r\n                            />\r\n                          )}\r\n                          Submit\r\n                        </Button>\r\n\r\n                        <Button onClick={handleCancel} variant=\"danger\">\r\n                          Cancel\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddTeacher;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useField } from \"formik\";\r\nexport default function SelectField(props) {\r\n  // field properties from formik field\r\n  const [field, state, { setValue, setTouched }] = useField(props.field.name);\r\n  console.log(state);\r\n  console.log(props.options);\r\n\r\n  // Chnage value to an array\r\n  const onChange = (value) => {\r\n    setValue(value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      {...props}\r\n      value={state?.value}\r\n      isMulti\r\n      onChange={onChange}\r\n      onBlur={setTouched}\r\n    />\r\n  );\r\n}\r\n"],"sourceRoot":""}