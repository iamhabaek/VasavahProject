{"version":3,"sources":["app/views/classrooms/AssignNew.js","../node_modules/nanoid/index.browser.js","../node_modules/react-bootstrap/esm/Spinner.js","app/views/classrooms/CustomMultiSelect.js"],"names":["basicFormSchema","yup","shape","studentId","required","AssignNew","useContext","AppContext","classrooms","students","teachers","subjects","classroomSlots","dispatch","user","token","history","useHistory","id","useParams","useState","loading","setLoading","classroomSlot","find","filteredStudents","filter","student","course","label","yearLevel","filterAlready","studentsId","includes","console","log","options","map","value","name","handleSubmit","values","a","push","notifications","nanoid","created","Date","now","email","isViewed","action","content","location","description","assignNew","handleCancel","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","routeSegments","path","className","classroom","classroomId","roomName","startTime","endTime","teacher","teacherName","subject","initialValues","validationSchema","onSubmit","errors","touched","noValidate","classList","htmlFor","component","CustomMultiSelect","disabled","type","size","variant","animation","onClick","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","SelectField","useField","field","state","setValue","setTouched","isMulti","onChange","onBlur"],"mappings":"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","file":"static/js/22.62511ef3.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect, Fragment } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik, Field } from \"formik\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport CustomMultiSelect from \"./CustomMultiSelect\";\r\nimport { assignNew } from \"app/reducers/actions/ClassroomActions\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Swal from \"sweetalert2\";\r\nconst basicFormSchema = yup.object().shape({\r\n  studentId: yup.array().required(\"Student is required\"),\r\n});\r\n\r\nconst AssignNew = () => {\r\n  const {\r\n    classrooms,\r\n    students,\r\n    teachers,\r\n    subjects,\r\n    classroomSlots,\r\n    dispatch,\r\n    user,\r\n    token,\r\n  } = useContext(AppContext);\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const initialState = {\r\n    studentId: \"\",\r\n  };\r\n  const [loading, setLoading] = useState(false);\r\n  // Finding instance of a slot\r\n  const classroomSlot = classroomSlots.find(\r\n    (classroomSlot) => classroomSlot.id === id\r\n  );\r\n\r\n  // finding the data of assigned students\r\n  const filteredStudents =\r\n    classroomSlot &&\r\n    students.filter(\r\n      (student) =>\r\n        student.course === classroomSlot.course.label &&\r\n        student.yearLevel === classroomSlot.yearLevel.label\r\n    );\r\n  const filterAlready =\r\n    filteredStudents &&\r\n    filteredStudents.filter(\r\n      (student) => !classroomSlot.studentsId.includes(student.id)\r\n    );\r\n  console.log(filterAlready);\r\n  const options =\r\n    // filterAlready &&\r\n    filterAlready &&\r\n    filterAlready.map((student) => {\r\n      return {\r\n        value: student.id,\r\n        label: `${student.name}`,\r\n      };\r\n    });\r\n  const handleSubmit = async (values) => {\r\n    const { studentId } = values;\r\n    let studentsId = [...classroomSlot.studentsId];\r\n    studentId.map((student) => studentsId.push(student.value));\r\n    // Action for assigning new students\r\n    const notifications = {\r\n      id: nanoid(),\r\n      created: Date.now(),\r\n      user: user.email,\r\n      isViewed: false,\r\n      action: \"assign\",\r\n      content: {\r\n        name: \"students\",\r\n        location: \"assign\",\r\n        description: \"click to see more information\",\r\n      },\r\n    };\r\n    setLoading(true);\r\n\r\n    await assignNew(id, studentsId, notifications, token)(dispatch);\r\n    setLoading(false);\r\n  };\r\n  const handleCancel = () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/classrooms/my-classes\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Home\", path: \"/\" },\r\n          {\r\n            name: \"Assign and Generate\",\r\n            path: \"/classrooms/classrooms-assign\",\r\n          },\r\n          { name: \"Assign Student\" },\r\n        ]}\r\n      />\r\n\r\n      {subjects &&\r\n        classrooms &&\r\n        teachers &&\r\n        filteredStudents &&\r\n        classroomSlot &&\r\n        classroomSlots &&\r\n        students &&\r\n        options && (\r\n          <div className=\"card\">\r\n            <div className=\"d-flex flex-row justify-content-between p-2\">\r\n              <h5>\r\n                Room:{\" \"}\r\n                {classrooms.find(\r\n                  (classroom) => classroom.id === classroomSlot.classroomId\r\n                ) &&\r\n                  classrooms.find(\r\n                    (classroom) => classroom.id === classroomSlot.classroomId\r\n                  ).roomName}\r\n              </h5>\r\n              <h5>\r\n                Time: {`${classroomSlot.startTime} - ${classroomSlot.endTime}`}\r\n              </h5>\r\n              <h5>\r\n                Teacher:{\" \"}\r\n                {teachers.find(\r\n                  (teacher) => teacher.id === classroomSlot.teacher\r\n                )\r\n                  ? teachers.find(\r\n                      (teacher) => teacher.id === classroomSlot.teacher\r\n                    ).teacherName\r\n                  : \"No Teacher Found\"}\r\n              </h5>\r\n              <h5>Subject: {classroomSlot.subject.label}</h5>\r\n              <h5>Course: {classroomSlot.course.label}</h5>\r\n              <h5>Year Level: {classroomSlot.yearLevel.label}</h5>\r\n            </div>\r\n            <Formik\r\n              initialValues={initialState}\r\n              validationSchema={basicFormSchema}\r\n              onSubmit={handleSubmit}\r\n            >\r\n              {({ values, errors, touched, handleSubmit }) => {\r\n                return (\r\n                  <form\r\n                    className=\"needs-validation\"\r\n                    onSubmit={handleSubmit}\r\n                    noValidate\r\n                  >\r\n                    <div className=\"card-body\">\r\n                      <div className=\"form-row\">\r\n                        <div\r\n                          className={classList({\r\n                            \"form-group col-md-6\": true,\r\n                            \"invalid-field\":\r\n                              errors.studentId && touched.studentId,\r\n                          })}\r\n                        >\r\n                          <label htmlFor=\"studentId\" className=\"ul-form__label\">\r\n                            Students:\r\n                          </label>\r\n                          <Field\r\n                            name=\"studentId\"\r\n                            component={CustomMultiSelect}\r\n                            options={options}\r\n                            value={values.studentId}\r\n                            required\r\n                          />\r\n                          <div className=\"invalid-feedback\">\r\n                            Student is required\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"custom-separator\"></div>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                      <div className=\"mc-footer\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-lg-12 \">\r\n                            <Button\r\n                              disabled={loading}\r\n                              className=\" text-12 btn btn-primary m-1\"\r\n                              type=\"submit\"\r\n                            >\r\n                              {loading && (\r\n                                <Spinner\r\n                                  size=\"sm\"\r\n                                  variant=\"light\"\r\n                                  className=\"mr-1\"\r\n                                  animation=\"border\"\r\n                                />\r\n                              )}\r\n                              Submit\r\n                            </Button>\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"btn btn-danger m-1\"\r\n                              onClick={handleCancel}\r\n                            >\r\n                              Cancel\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AssignNew;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useField } from \"formik\";\r\nexport default function SelectField(props) {\r\n  const [field, state, { setValue, setTouched }] = useField(props.field.name);\r\n\r\n  //turn value to an array\r\n  const onChange = (value) => {\r\n    setValue(value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      {...props}\r\n      value={state?.value}\r\n      isMulti\r\n      onChange={onChange}\r\n      onBlur={setTouched}\r\n    />\r\n  );\r\n}\r\n"],"sourceRoot":""}