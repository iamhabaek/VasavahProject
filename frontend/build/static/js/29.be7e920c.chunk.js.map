{"version":3,"sources":["app/views/teachers/EditTeacher.js","../node_modules/nanoid/index.browser.js","../node_modules/react-bootstrap/esm/Spinner.js","app/views/teachers/CustomMultiSelect.js"],"names":["basicFormSchema","yup","shape","teacherName","required","birthDate","email","address","phone","subjects","gender","EditTeacher","useContext","AppContext","teachers","user","dispatch","token","history","useHistory","id","useParams","useState","loading","setLoading","teacher","find","options","map","subject","value","label","subjectName","genderOptions","handleSave","values","a","created","subjectList","push","updatedTeacher","modified","Date","now","notifications","nanoid","isViewed","action","content","name","location","description","Swal","fire","title","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","then","result","isConfirmed","updateTeacher","console","log","handleCancel","text","icon","confirmButtonColor","cancelButtonColor","routeSegments","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","noValidate","classList","htmlFor","type","placeholder","onChange","onBlur","opt","idx","key","checked","component","CustomMultiSelect","disabled","variant","as","size","role","aria-hidden","animation","onClick","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","SelectField","useField","field","state","setValue","setTouched","isMulti"],"mappings":"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","file":"static/js/29.be7e920c.chunk.js","sourcesContent":["import React, { useContext, Fragment, useState } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { Field, Formik } from \"formik\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport CustomMultiSelect from \"./CustomMultiSelect\";\r\nimport { updateTeacher } from \"app/reducers/actions/ClassroomActions\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\nconst basicFormSchema = yup.object().shape({\r\n  teacherName: yup.string().required(\"Teacher Name is required\"),\r\n  birthDate: yup.date().required(\"Birth Date is required\"),\r\n  email: yup.string().email().required(\"Email is required\"),\r\n  address: yup.string().required(\"Address is required\"),\r\n  phone: yup.string().required(\"Phone number is required\"),\r\n  subjects: yup.array().required(\"Subjects is required\"),\r\n  gender: yup.string().required(\"Gender is required\"),\r\n});\r\n\r\nconst EditTeacher = () => {\r\n  // states from context provider\r\n  const { teachers, user, subjects, dispatch, token } = useContext(AppContext);\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const teacher = teachers.find((teacher) => teacher.id === id);\r\n\r\n  const options = subjects.map((subject) => {\r\n    return {\r\n      value: subject.id,\r\n      label: subject.subjectName,\r\n    };\r\n  });\r\n  const genderOptions = [\r\n    { value: \"Male\", label: \"Male\" },\r\n    { value: \"Female\", label: \"Female\" },\r\n  ];\r\n  // save update function\r\n  const handleSave = async (values) => {\r\n    const {\r\n      teacherName,\r\n      birthDate,\r\n      address,\r\n      phone,\r\n      subjects,\r\n      gender,\r\n      email,\r\n      created,\r\n    } = values;\r\n    const subjectList = [];\r\n    subjects.map((subject) => {\r\n      subjectList.push(subject);\r\n    });\r\n    // updated object\r\n    const updatedTeacher = {\r\n      id: id,\r\n      teacherName: teacherName,\r\n      address: address,\r\n      email: email,\r\n      phone: phone,\r\n      subjects: subjectList,\r\n      gender: gender,\r\n      birthDate: birthDate,\r\n      created: created,\r\n      user: user.email,\r\n      modified: Date.now(),\r\n    };\r\n    const notifications = {\r\n      id: nanoid(),\r\n      created: Date.now(),\r\n      user: user.email,\r\n      isViewed: false,\r\n      action: \"update\",\r\n      content: {\r\n        name: teacherName,\r\n        location: \"teacher\",\r\n\r\n        description: \"click to see more information\",\r\n      },\r\n    };\r\n    Swal.fire({\r\n      title: \"Do you want to save the changes?\",\r\n      showDenyButton: true,\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Save\",\r\n      denyButtonText: `Don't save`,\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        try {\r\n          setLoading(true);\r\n          await updateTeacher(\r\n            id,\r\n            updatedTeacher,\r\n            notifications,\r\n            token\r\n          )(dispatch);\r\n          await Swal.fire(\"Updated!\", \"Teacher has been updated.\", \"success\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    });\r\n    setLoading(false);\r\n  };\r\n  const handleCancel = async () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/teachers/teachersList\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Home\", path: \"/\" },\r\n          { name: \"Teachers List\", path: \"/teachers/teachersList\" },\r\n          { name: \"Edit Teacher\" },\r\n        ]}\r\n      />\r\n      {teacher && (\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <strong>\r\n              Please fill all the required (\r\n              <span className=\"text-danger\">*</span>) fields\r\n            </strong>\r\n          </div>\r\n          <Formik\r\n            initialValues={teacher}\r\n            validationSchema={basicFormSchema}\r\n            onSubmit={handleSave}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              setFieldValue,\r\n            }) => {\r\n              return (\r\n                <form\r\n                  className=\"needs-validation\"\r\n                  onSubmit={handleSubmit}\r\n                  noValidate\r\n                >\r\n                  <div className=\"card-body\">\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.teacherName && touched.teacherName,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"teacherName\" className=\"ul-form__label\">\r\n                          Teacher Name (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"teacherName\"\r\n                          placeholder=\"Teacher Name\"\r\n                          name=\"teacherName\"\r\n                          value={values.teacherName}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          {errors.teacherName}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.birthDate && touched.birthDate,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"age\" className=\"ul-form__label\">\r\n                          Birth Date (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          name=\"birthDate\"\r\n                          onChange={handleChange}\r\n                          value={values.birthDate}\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          {errors.birthDate}\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.address && touched.address,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"address\" className=\"ul-form__label\">\r\n                          Address (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"address\"\r\n                          placeholder=\"Address\"\r\n                          name=\"address\"\r\n                          value={values.address}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">{errors.address}</div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.phone && touched.phone,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                          Phone number (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"phone\"\r\n                          placeholder=\"Phone number\"\r\n                          name=\"phone\"\r\n                          value={values.phone}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">{errors.phone}</div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.email && touched.email,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                          Email Address (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"email\"\r\n                          className=\"form-control\"\r\n                          id=\"email\"\r\n                          placeholder=\"Email Address\"\r\n                          name=\"email\"\r\n                          value={values.email}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">{errors.email}</div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.gender && touched.gender,\r\n                        })}\r\n                      >\r\n                        {\" \"}\r\n                        <label className=\"ul-form__label\">\r\n                          Gender (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        {genderOptions.map((opt, idx) => (\r\n                          <div key={idx}>\r\n                            <Field\r\n                              className=\"mr-1\"\r\n                              type=\"radio\"\r\n                              name=\"gender\"\r\n                              value={opt.value}\r\n                              // onChange={handleChange}\r\n                              checked={values.gender === opt.value}\r\n                            />\r\n                            <label className=\"ul-form__label\" htmlFor=\"gender\">\r\n                              {opt.label}\r\n                            </label>\r\n                          </div>\r\n                        ))}\r\n                        <div className=\"invalid-feedback\">{errors.gender}</div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.subjects && touched.subjects,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"subjects\" className=\"ul-form__label\">\r\n                          Subjects (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <Field\r\n                          name=\"subjects\"\r\n                          component={CustomMultiSelect}\r\n                          options={options}\r\n                          value={values.subjects}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Subjects is required\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"card-footer\">\r\n                    <div className=\"mc-footer\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-lg-12 \">\r\n                          <Button\r\n                            disabled={loading}\r\n                            variant=\"success\"\r\n                            type=\"submit\"\r\n                            className=\"mr-2\"\r\n                          >\r\n                            {loading && (\r\n                              <Spinner\r\n                                as=\"span\"\r\n                                variant=\"light\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                                animation=\"border\"\r\n                                className=\"mr-1\"\r\n                              />\r\n                            )}\r\n                            Save Changes\r\n                          </Button>\r\n                          <Button onClick={handleCancel} variant=\"danger\">\r\n                            Cancel\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EditTeacher;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useField } from \"formik\";\r\nexport default function SelectField(props) {\r\n  // field properties from formik field\r\n  const [field, state, { setValue, setTouched }] = useField(props.field.name);\r\n  console.log(state);\r\n  console.log(props.options);\r\n\r\n  // Chnage value to an array\r\n  const onChange = (value) => {\r\n    setValue(value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      {...props}\r\n      value={state?.value}\r\n      isMulti\r\n      onChange={onChange}\r\n      onBlur={setTouched}\r\n    />\r\n  );\r\n}\r\n"],"sourceRoot":""}