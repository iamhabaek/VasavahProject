{"version":3,"sources":["app/views/students/EditStudent.js","../node_modules/nanoid/index.browser.js","../node_modules/react-bootstrap/esm/Spinner.js","app/views/students/CustomSelect.js","app/views/students/options.js"],"names":["basicFormSchema","yup","shape","name","required","birthDate","address","phone","course","email","yearLevel","gender","status","EditStudent","useContext","AppContext","students","courses","dispatch","token","user","history","useHistory","id","useParams","useState","loading","setLoading","student","find","options","map","value","courseName","label","genderOptions","statusOptions","handleSave","values","a","created","updatedStudent","modified","Date","now","notifications","nanoid","isViewed","action","content","location","description","Swal","fire","title","showDenyButton","showCancelButton","confirmButtonText","denyButtonText","then","result","isConfirmed","updateStudent","console","log","handleCancel","text","icon","confirmButtonColor","cancelButtonColor","push","routeSegments","path","className","initialValues","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","handleSubmit","setFieldValue","isSubmitting","noValidate","classList","htmlFor","type","placeholder","onChange","onBlur","yearLvlOptions","opt","idx","key","checked","disabled","variant","as","size","role","aria-hidden","animation","onClick","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Spinner","React","forwardRef","_ref","ref","bsPrefix","children","_ref$as","Component","props","_objectWithoutPropertiesLoose","bsSpinnerPrefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","option","defaultValue"],"mappings":"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","file":"static/js/18.bea50b8a.chunk.js","sourcesContent":["import React, { useContext, Fragment, useState } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport CustomSelect from \"./CustomSelect\";\r\nimport { Formik, Field } from \"formik\";\r\nimport { yearLvlOptions } from \"./options\";\r\nimport { updateStudent } from \"app/reducers/actions/ClassroomActions\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n// form validation schema\r\nconst basicFormSchema = yup.object().shape({\r\n  name: yup.string().required(\"Full Name is required\"),\r\n  birthDate: yup.string().required(\"Birth Date is required\"),\r\n  address: yup.string().required(\"Address is required\"),\r\n  phone: yup.string().required(\"Phone number is required\"),\r\n  course: yup.string().required(\"Course is required\"),\r\n  email: yup.string().email().required(\"email is required\"),\r\n  yearLevel: yup.string().required(\"Year Level is required\"),\r\n  gender: yup.string().required(\"Gender is required\"),\r\n  status: yup.string().required(\"Status is required\"),\r\n});\r\n\r\nconst EditStudent = () => {\r\n  const { students, courses, dispatch, token, user } = useContext(AppContext);\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const student = students.find((student) => student.id === id);\r\n  const options = courses.map((course) => {\r\n    return {\r\n      value: course.courseName,\r\n      label: course.courseName,\r\n    };\r\n  });\r\n  const genderOptions = [\r\n    { value: \"Male\", label: \"Male\" },\r\n    { value: \"Female\", label: \"Female\" },\r\n  ];\r\n  const statusOptions = [\r\n    { value: \"Regular\", label: \"Regular\" },\r\n    { value: \"Irregular\", label: \"Irregular\" },\r\n  ];\r\n  const handleSave = async (values) => {\r\n    const {\r\n      name,\r\n      email,\r\n      birthDate,\r\n      status,\r\n      address,\r\n      phone,\r\n      course,\r\n      gender,\r\n      yearLevel,\r\n      created,\r\n    } = values;\r\n    const updatedStudent = {\r\n      name: name,\r\n      birthDate: birthDate,\r\n      gender: gender,\r\n      address: address,\r\n      phone: phone,\r\n      course: course,\r\n      status: status,\r\n      yearLevel: yearLevel,\r\n      email: email,\r\n      created: created,\r\n      modified: Date.now(),\r\n    };\r\n    const notifications = {\r\n      id: nanoid(),\r\n      created: Date.now(),\r\n      user: user.email,\r\n      isViewed: false,\r\n      action: \"update\",\r\n      content: {\r\n        name: name,\r\n        location: \"teacher\",\r\n\r\n        description: \"click to see more information\",\r\n      },\r\n    };\r\n\r\n    Swal.fire({\r\n      title: \"Do you want to save the changes?\",\r\n      showDenyButton: true,\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Save\",\r\n      denyButtonText: `Don't save`,\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        try {\r\n          setLoading(true);\r\n          await updateStudent(\r\n            id,\r\n            updatedStudent,\r\n            notifications,\r\n            token\r\n          )(dispatch);\r\n          await Swal.fire(\"Updated!\", \"Student has been updated.\", \"success\");\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    });\r\n\r\n    setLoading(false);\r\n  };\r\n  console.log(student);\r\n  const handleCancel = async () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/students/studentslist\");\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Home\", path: \"/\" },\r\n          { name: \"Students List\", path: \"/students/studentsList\" },\r\n          { name: \"Edit Student\" },\r\n        ]}\r\n      />\r\n      {student && (\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <strong>\r\n              Please fill all the required (\r\n              <span className=\"text-danger\">*</span>) fields\r\n            </strong>\r\n          </div>\r\n          <Formik\r\n            initialValues={student}\r\n            validationSchema={basicFormSchema}\r\n            onSubmit={handleSave}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              setFieldValue,\r\n            }) => {\r\n              return (\r\n                <form\r\n                  className=\"needs-validation\"\r\n                  onSubmit={handleSubmit}\r\n                  noValidate\r\n                >\r\n                  <div className=\"card-body\">\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.name && touched.name,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"firstName\" className=\"ul-form__label\">\r\n                          Full Name (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"name\"\r\n                          placeholder=\"Full Name\"\r\n                          name=\"name\"\r\n                          value={values.name}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">{errors.name}</div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.birthDate && touched.birthDate,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"age\" className=\"ul-form__label\">\r\n                          Birth Date (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          className=\"form-control\"\r\n                          type=\"date\"\r\n                          name=\"birthDate\"\r\n                          onChange={handleChange}\r\n                          value={values.birthDate}\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          {errors.birthDate}\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.address && touched.address,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"address\" className=\"ul-form__label\">\r\n                          Address (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"address\"\r\n                          placeholder=\"Address\"\r\n                          name=\"address\"\r\n                          value={values.address}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Address is required\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.email && touched.email,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                          Email Address (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"email\"\r\n                          className=\"form-control\"\r\n                          id=\"email\"\r\n                          placeholder=\"Email Address\"\r\n                          name=\"email\"\r\n                          value={values.email}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">{errors.email}</div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.phone && touched.phone,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"phone\" className=\"ul-form__label\">\r\n                          Phone number (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"form-control\"\r\n                          id=\"phone\"\r\n                          placeholder=\"Phone number\"\r\n                          name=\"phone\"\r\n                          value={values.phone}\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">{errors.phone}</div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.course && touched.course,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"course\" className=\"ul-form__label\">\r\n                          Course (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <CustomSelect\r\n                          name=\"course\"\r\n                          options={options}\r\n                          onChange={(value) =>\r\n                            setFieldValue(\"course\", value.value)\r\n                          }\r\n                          value={values.course}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Course is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.yearLevel && touched.yearLevel,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"yearLevel\" className=\"ul-form__label\">\r\n                          Year Level (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <CustomSelect\r\n                          name=\"yearLevel\"\r\n                          options={yearLvlOptions}\r\n                          onChange={(value) =>\r\n                            setFieldValue(\"yearLevel\", value.value)\r\n                          }\r\n                          value={values.yearLevel}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">\r\n                          Year Level is required\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.gender && touched.gender,\r\n                        })}\r\n                      >\r\n                        <label className=\"ul-form__label\">\r\n                          Gender (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n\r\n                        {genderOptions.map((opt, idx) => (\r\n                          <div key={idx}>\r\n                            <Field\r\n                              className=\"mr-2\"\r\n                              id=\"gender\"\r\n                              type=\"radio\"\r\n                              name=\"gender\"\r\n                              value={opt.value}\r\n                              // onChange={handleChange}\r\n                              checked={values.gender === opt.value}\r\n                            />\r\n                            <label htmlFor=\"gender\" className=\"ul-form__label\">\r\n                              {opt.label}\r\n                            </label>\r\n                          </div>\r\n                        ))}\r\n                        <div className=\"invalid-feedback\">\r\n                          Gender is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.status && touched.status,\r\n                        })}\r\n                      >\r\n                        {\" \"}\r\n                        <label className=\"ul-form__label\">\r\n                          Status (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        {statusOptions.map((opt, idx) => (\r\n                          <div key={idx}>\r\n                            <Field\r\n                              className=\"mr-2\"\r\n                              id=\"status\"\r\n                              type=\"radio\"\r\n                              name=\"status\"\r\n                              value={opt.value}\r\n                              // onChange={handleChange}\r\n                              checked={values.status === opt.value}\r\n                            />\r\n                            <label htmlFor=\"status\" className=\"ul-form__label\">\r\n                              {opt.label}\r\n                            </label>\r\n                          </div>\r\n                        ))}\r\n                        <div className=\"invalid-feedback\">{errors.status}</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"card-footer\">\r\n                    <div className=\"mc-footer\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-lg-12 \">\r\n                          <Button\r\n                            disabled={loading}\r\n                            variant=\"success\"\r\n                            type=\"submit\"\r\n                            className=\"mr-2\"\r\n                          >\r\n                            {loading && (\r\n                              <Spinner\r\n                                as=\"span\"\r\n                                variant=\"light\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                                animation=\"border\"\r\n                                className=\"mr-1\"\r\n                              />\r\n                            )}\r\n                            Save Changes\r\n                          </Button>\r\n                          <Button onClick={handleCancel} variant=\"danger\">\r\n                            Cancel\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EditStudent;\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Spinner = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      animation = _ref.animation,\n      size = _ref.size,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"animation\", \"size\", \"children\", \"as\", \"className\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  var bsSpinnerPrefix = bsPrefix + \"-\" + animation;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsSpinnerPrefix, size && bsSpinnerPrefix + \"-\" + size, variant && \"text-\" + variant)\n  }), children);\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nexport default ({ onChange, options, value, className }) => {\r\n  const defaultValue = (options, value) => {\r\n    return options ? options.find((option) => option.value === value) : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Select\r\n        value={defaultValue(options, value)}\r\n        onChange={(value) => {\r\n          onChange(value);\r\n        }}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export const yearLvlOptions = [\r\n  {\r\n    value: \"1st Year\",\r\n    label: \"1st Year\",\r\n  },\r\n  {\r\n    value: \"2nd Year\",\r\n    label: \"2nd Year\",\r\n  },\r\n  {\r\n    value: \"3rd Year\",\r\n    label: \"3rd Year\",\r\n  },\r\n  {\r\n    value: \"4th Year\",\r\n    label: \"4th Year\",\r\n  },\r\n  {\r\n    value: \"5th Year\",\r\n    label: \"5th Year\",\r\n  },\r\n];\r\nexport const genderOptions = [\r\n  {\r\n    value: \"Male\",\r\n    label: \"Male\",\r\n  },\r\n  {\r\n    value: \"Female\",\r\n    label: \"Female\",\r\n  },\r\n];\r\n"],"sourceRoot":""}