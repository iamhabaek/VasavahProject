{"version":3,"sources":["app/views/classrooms/ApplySlot.js","app/views/classrooms/CustomSelect.js","app/views/classrooms/CustomMultiSelect.js","app/views/classrooms/functions/generateTime.js"],"names":["basicFormSchema","yup","shape","resourceId","required","startDate","endDate","startTime","subject","ApplySlot","useContext","AppContext","teachers","classrooms","courses","user","dispatch","token","useState","loading","setLoading","history","useHistory","teacher","find","id","uid","handleCancel","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","push","handleSubmit","values","a","endTime","course","yearLevel","days","start","dayjs","end","daysOfWeek","currentDate","add","dayOfWeek","format","conflict","every","value","includes","label","console","log","daysList","map","day","classroomSLot","nanoid","Date","getTime","isApproved","studentsId","created","now","applySlot","classroomOptions","room","timeOptions","generateTimeSlots","time","daysOptions","idx","courseOptions","courseName","subjectsOption","subjects","yearLevelOptions","year","routeSegments","name","path","className","initialValues","validationSchema","onSubmit","errors","touched","isSubmitting","handleChange","setFieldValue","noValidate","classList","htmlFor","field","form","options","o","onChange","selectedOption","dateFormat","placeholderText","selected","date","disabled","component","CustomMultiSelect","type","as","size","variant","role","aria-hidden","animation","onClick","option","defaultValue","SelectField","props","useField","state","setValue","setTouched","isMulti","onBlur","x","setTime","h","m","s","ms","setHours","setMinutes","setSeconds","setMilliseconds","from","to","blocks","cursor","isBefore","getHours","addMinutes"],"mappings":"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","file":"static/js/21.d4fa1428.chunk.js","sourcesContent":["import React, { useContext, useState, Fragment } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik, Field } from \"formik\";\r\nimport AppContext from \"app/appContext\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport CustomSelect from \"./CustomSelect\";\r\nimport { nanoid } from \"nanoid\";\r\nimport CustomMultiSelect from \"./CustomMultiSelect\";\r\nimport { applySlot } from \"app/reducers/actions/ClassroomActions\";\r\nimport Swal from \"sweetalert2\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport Select from \"react-select\";\r\nimport dayjs from \"dayjs\";\r\nimport { generateTimeSlots } from \"./functions/generateTime\";\r\nconst basicFormSchema = yup.object().shape({\r\n  resourceId: yup.string().required(\"Room is required\"),\r\n  startDate: yup.string().required(\"Start Date is required\"),\r\n  endDate: yup.string().required(\"End Date is required\"),\r\n  startTime: yup.string().required(\"Start Time is required\"),\r\n  subject: yup.string().required(\"Subject is required\"),\r\n  startTime: yup.string().required(\"Start Time is required\"),\r\n  endTime: yup.string().required(\"Eend Time is required\"),\r\n  course: yup.string().required(\"Course is required\"),\r\n  yearLevel: yup.string().required(\"Year Level is required\"),\r\n  days: yup.array().required(\"Days is required\"),\r\n});\r\n\r\nconst ApplySlot = () => {\r\n  const { teachers, classrooms, courses, user, dispatch, token } =\r\n    useContext(AppContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n  const initialState = {\r\n    resourceId: \"\",\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n    startTime: \"\",\r\n    endTime: \"\",\r\n    teacher: \"\",\r\n    subject: \"\",\r\n    course: \"\",\r\n    yearLevel: \"\",\r\n    days: \"\",\r\n  };\r\n  const teacher = teachers.find((teacher) => teacher.id === user.uid);\r\n\r\n  const handleCancel = () => {\r\n    Swal.fire({\r\n      title: \"Confirm to cancel\",\r\n      text: \"Are you sure you want to cancel? If you cancel, all information that you have entered will be lost.\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        history.push(\"/classrooms/schedule\");\r\n      }\r\n    });\r\n  };\r\n  const handleSubmit = async (values) => {\r\n    const {\r\n      startDate,\r\n      endDate,\r\n      endTime,\r\n      startTime,\r\n      resourceId,\r\n      course,\r\n      subject,\r\n      yearLevel,\r\n      days,\r\n    } = values;\r\n    let start = dayjs(startDate);\r\n    let end = dayjs(endDate);\r\n    let error = false;\r\n    let daysOfWeek = [];\r\n    for (\r\n      let currentDate = start;\r\n      currentDate <= end;\r\n      currentDate = dayjs(currentDate).add(1, \"day\")\r\n    ) {\r\n      let dayOfWeek = dayjs(currentDate).format(\"dddd\");\r\n      daysOfWeek.push(dayOfWeek);\r\n    }\r\n    let conflict = days.every((value) => daysOfWeek.includes(value.label));\r\n    console.log(conflict);\r\n    console.log(days);\r\n    if (endTime.value < startTime.value || startTime.value === endTime.value) {\r\n      Swal.fire(\"Time selection error please check your selected time\");\r\n    } else if (startDate === endDate || endDate < startDate) {\r\n      Swal.fire(\"Date selection error please check the selected date\");\r\n    } else if (conflict === false) {\r\n      Swal.fire(\r\n        \"Please make sure that your selected dates has correct corresponding days schedule\"\r\n      );\r\n    } else {\r\n      const daysList = [];\r\n      days.map((day) => daysList.push(day.label));\r\n      const classroomSLot = {\r\n        id: nanoid(),\r\n        resourceId: resourceId.value,\r\n        startDate: new Date(startDate).getTime(),\r\n        endDate: new Date(endDate).getTime(),\r\n        startTime: startTime.value,\r\n        endTime: endTime.value,\r\n        subject: subject,\r\n        teacher: user.uid,\r\n        yearLevel: yearLevel,\r\n        course: course,\r\n        isApproved: false,\r\n        days: daysList,\r\n        studentsId: [],\r\n        created: Date.now(),\r\n      };\r\n      setLoading(true);\r\n      await applySlot(classroomSLot, token)(dispatch);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const classroomOptions = classrooms.map((room) => {\r\n    return {\r\n      label: room.title,\r\n      value: room.id,\r\n    };\r\n  });\r\n  const timeOptions = generateTimeSlots(7, 21).map((time) => time);\r\n  const years = [\"1st Year\", \"2nd Year\", \"3rd Year\", \"4th Year\", \"5th Year\"];\r\n  const days = [\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n    \"Sunday\",\r\n  ];\r\n  const formatTimestamp = (timestamp) => {\r\n    return dayjs(timestamp).format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const daysOptions = days.map((day, idx) => {\r\n    return {\r\n      label: day,\r\n      value: idx,\r\n    };\r\n  });\r\n  const courseOptions =\r\n    courses &&\r\n    courses.map((course) => {\r\n      return {\r\n        value: course.courseName,\r\n        label: course.courseName,\r\n      };\r\n    });\r\n  const subjectsOption =\r\n    teacher &&\r\n    teacher.subjects.map((subject) => {\r\n      return {\r\n        value: subject.value,\r\n        label: subject.label,\r\n      };\r\n    });\r\n  const yearLevelOptions = years.map((year) => {\r\n    return {\r\n      value: year,\r\n      label: year,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Home\", path: \"/\" },\r\n          { name: \"Classrooms List\", path: \"/classrooms/schedule\" },\r\n          { name: \"Apply for slot\" },\r\n        ]}\r\n      />\r\n      {teacher && (\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <strong>\r\n              Please fill all the required (\r\n              <span className=\"text-danger\">*</span>) fields\r\n            </strong>\r\n          </div>\r\n          <Formik\r\n            initialValues={initialState}\r\n            validationSchema={basicFormSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              handleChange,\r\n              setFieldValue,\r\n            }) => {\r\n              return (\r\n                <form\r\n                  className=\"needs-validation\"\r\n                  onSubmit={handleSubmit}\r\n                  noValidate\r\n                >\r\n                  <div className=\"card-body\">\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.resourceId && touched.resourceId,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"resourceId\" className=\"ul-form__label\">\r\n                          Room (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <Field name=\"resourceId\">\r\n                          {({ field, form }) => (\r\n                            <Select\r\n                              options={classroomOptions}\r\n                              value={classroomOptions.find(\r\n                                (o) => o.value === values.resourceId\r\n                              )}\r\n                              onChange={(selectedOption) => {\r\n                                form.setFieldValue(\r\n                                  \"resourceId\",\r\n                                  selectedOption\r\n                                );\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </Field>\r\n                        <div className=\"invalid-feedback\">\r\n                          {errors.resourceId}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"form-group col-md-6\"></div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.startDate && touched.startDate,\r\n                        })}\r\n                      >\r\n                        <label\r\n                          htmlFor=\"startDate\"\r\n                          className=\"ul-form__label mr-2\"\r\n                        >\r\n                          Start Date (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <div className=\"form-group\">\r\n                          <Field name=\"startDate\">\r\n                            {({ field, form }) => (\r\n                              <DatePicker\r\n                                dateFormat=\"yyyy/MM/dd\"\r\n                                className=\"form-control \"\r\n                                placeholderText=\"Select Date\"\r\n                                selected={values.startDate}\r\n                                onChange={(date) => {\r\n                                  console.log(date);\r\n                                  form.setFieldValue(\"startDate\", date);\r\n                                }}\r\n                              />\r\n                            )}\r\n                          </Field>\r\n                        </div>\r\n                        <div className=\"invalid-feedback\">\r\n                          {errors.startDate}\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.endTime && touched.endTime,\r\n                        })}\r\n                      >\r\n                        <label\r\n                          htmlFor=\"endDate\"\r\n                          className=\"ul-form__label mr-2\"\r\n                        >\r\n                          End Date (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <div className=\"form-group\">\r\n                          <Field name=\"endDate\">\r\n                            {({ field, form }) => (\r\n                              <DatePicker\r\n                                className=\"form-control\"\r\n                                dateFormat=\"yyyy/MM/dd\"\r\n                                placeholderText=\"Select Date\"\r\n                                selected={values.endDate}\r\n                                onChange={(date) => {\r\n                                  console.log(date);\r\n                                  form.setFieldValue(\"endDate\", date);\r\n                                }}\r\n                              />\r\n                            )}\r\n                          </Field>\r\n                        </div>\r\n                        <div className=\"invalid-feedback\">{errors.endDate}</div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.startTime && touched.startTime,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"startTime\" className=\"ul-form__label\">\r\n                          Start Time (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <Field name=\"startTime\">\r\n                          {({ field, form }) => (\r\n                            <Select\r\n                              options={timeOptions}\r\n                              value={timeOptions.find(\r\n                                (o) => o.value === values.startTime\r\n                              )}\r\n                              onChange={(selectedOption) => {\r\n                                form.setFieldValue(\"startTime\", selectedOption);\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </Field>\r\n                        <div className=\"invalid-feedback\">\r\n                          Start Time is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.endTime && touched.endTime,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"endTime\" className=\"ul-form__label\">\r\n                          End Time\r\n                        </label>\r\n                        <Field name=\"endTime\">\r\n                          {({ field, form }) => (\r\n                            <Select\r\n                              options={timeOptions}\r\n                              value={timeOptions.find(\r\n                                (o) => o.value === values.endTime\r\n                              )}\r\n                              onChange={(selectedOption) => {\r\n                                form.setFieldValue(\"endTime\", selectedOption);\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </Field>\r\n                        <div className=\"invalid-feedback\">\r\n                          End Time is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.subject && touched.subject,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"subject\" className=\"ul-form__label\">\r\n                          Subject (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <Field name=\"subject\">\r\n                          {({ field, form }) => (\r\n                            <Select\r\n                              options={subjectsOption}\r\n                              value={subjectsOption.find(\r\n                                (o) => o.value === values.subject\r\n                              )}\r\n                              onChange={(selectedOption) => {\r\n                                form.setFieldValue(\"subject\", selectedOption);\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </Field>\r\n                        <div className=\"invalid-feedback\">\r\n                          Subject is required\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.course && touched.course,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"course\" className=\"ul-form__label\">\r\n                          Course (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <Field name=\"course\">\r\n                          {({ field, form }) => (\r\n                            <Select\r\n                              options={courseOptions}\r\n                              value={courseOptions.find(\r\n                                (o) => o.value === values.course\r\n                              )}\r\n                              onChange={(selectedOption) => {\r\n                                form.setFieldValue(\"course\", selectedOption);\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </Field>\r\n                        <div className=\"invalid-feedback\">\r\n                          Course is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\":\r\n                            errors.yearLevel && touched.yearLevel,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"yearLevel\" className=\"ul-form__label\">\r\n                          Year Level (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <Field name=\"yearLevel\">\r\n                          {({ field, form }) => (\r\n                            <Select\r\n                              options={yearLevelOptions}\r\n                              value={yearLevelOptions.find(\r\n                                (o) => o.value === values.yearLevel\r\n                              )}\r\n                              onChange={(selectedOption) => {\r\n                                form.setFieldValue(\"yearLevel\", selectedOption);\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </Field>\r\n                        <div className=\"invalid-feedback\">\r\n                          Year Level is required\r\n                        </div>\r\n                      </div>\r\n                      <div\r\n                        className={classList({\r\n                          \"form-group col-md-6\": true,\r\n                          \"invalid-field\": errors.day && touched.day,\r\n                        })}\r\n                      >\r\n                        <label htmlFor=\"days\" className=\"ul-form__label\">\r\n                          Days (<span className=\"text-danger\">*</span>)\r\n                        </label>\r\n                        <Field\r\n                          disabled={!values.startDate && !values.startDate}\r\n                          name=\"days\"\r\n                          component={CustomMultiSelect}\r\n                          options={daysOptions}\r\n                          value={values.days}\r\n                          required\r\n                        />\r\n                        <div className=\"invalid-feedback\">Days is required</div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"custom-separator\"></div>\r\n                  </div>\r\n                  <div className=\"card-footer\">\r\n                    <div className=\"mc-footer\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-lg-12 \">\r\n                          <Button\r\n                            disabled={loading}\r\n                            className=\"btn btn-primary mr-2\"\r\n                            type=\"submit\"\r\n                          >\r\n                            {loading && (\r\n                              <Spinner\r\n                                as=\"span\"\r\n                                size=\"sm\"\r\n                                variant=\"light\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                                className=\"mr-1\"\r\n                                animation=\"border\"\r\n                              />\r\n                            )}\r\n                            Submit\r\n                          </Button>\r\n                          <Button onClick={handleCancel} variant=\"danger\">\r\n                            Cancel\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              );\r\n            }}\r\n          </Formik>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ApplySlot;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nexport default ({ onChange, options, value, className }) => {\r\n  // setting default value\r\n  const defaultValue = (options, value) => {\r\n    return options ? options.find((option) => option.value === value) : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Select\r\n        value={defaultValue(options, value)}\r\n        onChange={(value) => {\r\n          onChange(value);\r\n        }}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useField } from \"formik\";\r\nexport default function SelectField(props) {\r\n  const [field, state, { setValue, setTouched }] = useField(props.field.name);\r\n\r\n  //turn value to an array\r\n  const onChange = (value) => {\r\n    setValue(value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      {...props}\r\n      value={state?.value}\r\n      isMulti\r\n      onChange={onChange}\r\n      onBlur={setTouched}\r\n    />\r\n  );\r\n}\r\n","import {\r\n  isBefore,\r\n  setHours,\r\n  setMinutes,\r\n  setSeconds,\r\n  addMinutes,\r\n  setMilliseconds,\r\n  format,\r\n} from \"date-fns\";\r\n\r\nexport const generateTimeSlots = (startTime, endTime) => {\r\n  const setTime = (x, h = 0, m = 0, s = 0, ms = 0) =>\r\n    setHours(setMinutes(setSeconds(setMilliseconds(x, ms), s), m), h);\r\n  const from = setTime(new Date(), startTime);\r\n  const to = setTime(new Date(), endTime + 1);\r\n  const step = (x) => addMinutes(x, 60);\r\n\r\n  let blocks = [];\r\n  let cursor = from;\r\n  let inc = 0;\r\n  while (isBefore(cursor, to)) {\r\n    blocks.push({\r\n      label: format(cursor, \"h:mm a\"),\r\n      value: cursor.getHours(),\r\n    });\r\n    cursor = step(cursor);\r\n  }\r\n\r\n  return blocks;\r\n};\r\n"],"sourceRoot":""}